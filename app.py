import streamlit as st
from utils import fetch_user_data, api_final_process

# Initialisation de l'√©tat de session pour la navigation
if "current_page" not in st.session_state:
    st.session_state["current_page"] = "DPExplorer"

# Fonction pour changer de page
def navigate_to(page):
    st.session_state["current_page"] = page

# Barre lat√©rale avec des boutons pour changer de page
st.sidebar.title("Navigation")
if st.sidebar.button("Acc√©der √† DPExplorer"):
    navigate_to("DPExplorer")
if st.sidebar.button("√Ä propos"):
    navigate_to("√Ä propos")

# Page "DPExplorer"
if st.session_state["current_page"] == "DPExplorer":
    # Code couleur des √©tiquettes DPE (ordre invers√© pour G -> A)
    dpe_colors = {
        "G": "#ff0000",  # Rouge fonc√©
        "F": "#ff9a33",  # Orange
        "E": "#ffcc00",  # Orange Jaune
        "D": "#ffff00",  # Jaune
        "C": "#ccff33",  # Vert Jaune
        "B": "#33cc33",  # Vert
        "A": "#319a31",  # Vert fonc√©
    }

    # Ordre des √©tiquettes pour comparaison (de G vers A)
    dpe_order = list(dpe_colors.keys())

    # CSS global pour les √©tiquettes stylis√©es
    st.markdown(
        """
        <style>
            .dpe-button {
                color: beige;
                text-shadow: -1px -1px 0 #000,
                             1px -1px 0 #000,
                             -1px 1px 0 #000,
                             1px 1px 0 #000;  /* Bordure noire autour des lettres */
                font-size: 28px; /* Taille agrandie */
                font-weight: bold; /* Texte en gras */
                text-align: center;
                border-radius: 10px;
                padding: 15px;
                width: 100%;
                display: block;
                margin: 10px auto;
            }
        </style>
        """,
        unsafe_allow_html=True,
    )

    def main():
        st.title("üñåÔ∏è DPExplorer üõ†Ô∏è")
        st.write("Optimisez vos travaux pour atteindre une meilleure √©tiquette √©nerg√©tique. (Valide uniquement pour les DPE √©tablis apr√®s juillet 2021)")

        # Initialiser l'√©tat pour g√©rer le N¬∞DPE
        if "n_dpe_valid" not in st.session_state:
            st.session_state["n_dpe_valid"] = False
        if "etiquette_dpe" not in st.session_state:
            st.session_state["etiquette_dpe"] = None
        if "note_cible" not in st.session_state:
            st.session_state["note_cible"] = None

        # √âtape 1 : Entr√©e utilisateur pour le N¬∞DPE avec bouton de validation
        if not st.session_state["n_dpe_valid"]:
            n_dpe = st.text_input(
                "üìÑ Entrez votre N¬∞DPE : (Exemple : 2494E3076086T)",
                key="n_dpe_input",
                placeholder="Exemple : 2494E3076086T"
            )
            if st.button("‚úÖ Valider le N¬∞DPE"):
                if n_dpe:
                    st.info(f"üîÑ R√©cup√©ration des informations pour le N¬∞DPE {n_dpe}...")
                    with st.spinner("Analyse en cours..."):
                        # Appel √† la fonction pour r√©cup√©rer les donn√©es
                        data_df = fetch_user_data(n_dpe)

                        if not data_df.empty:
                            # R√©cup√©rer l'√©tiquette actuelle
                            etiquette_dpe = data_df["Etiquette_DPE"].iloc[0] if "Etiquette_DPE" in data_df.columns else None

                            if etiquette_dpe in dpe_order:
                                st.session_state["n_dpe_valid"] = True
                                st.session_state["etiquette_dpe"] = etiquette_dpe
                                st.session_state["possible_labels"] = dpe_order[dpe_order.index(etiquette_dpe) + 1:]
                                st.session_state["n_dpe"] = n_dpe
                            else:
                                st.error("‚ö†Ô∏è L'√©tiquette DPE actuelle est invalide.")
                        else:
                            st.error("‚ö†Ô∏è Aucune donn√©e trouv√©e pour le N¬∞DPE fourni.")
                else:
                    st.warning("Veuillez entrer un N¬∞DPE valide.")

        # √âtape 2 : Afficher les √©tiquettes si N¬∞DPE valid√©
        if st.session_state["n_dpe_valid"]:
            etiquette_dpe = st.session_state["etiquette_dpe"]
            possible_labels = st.session_state["possible_labels"]

            # Afficher l'√©tiquette actuelle
            st.subheader("üìä Votre √©tiquette actuelle :")
            st.markdown(
                f"<div class='dpe-button' style='background-color: {dpe_colors[etiquette_dpe]};'>{etiquette_dpe}</div>",
                unsafe_allow_html=True
            )

            # S√©lection des √©tiquettes cibles
            st.subheader("üéØ S√©lectionnez votre √âtiquette DPE Cible")
            selected_label = st.selectbox(
                "Choisissez une √©tiquette cible :",
                options=possible_labels,
                key="dpe_selectbox"
            )

            # Stocker la note cible dans l'√©tat de session
            if selected_label:
                st.session_state["note_cible"] = selected_label
                st.markdown(
                    f"<div class='dpe-button' style='background-color: {dpe_colors[selected_label]};'>{selected_label}</div>",
                    unsafe_allow_html=True
                )
                st.success(f"üéØ Votre objectif est d'atteindre l'√©tiquette : {selected_label}")

            # Afficher les valeurs stock√©es pour confirmation
            st.write("**Vos infos:**")
            st.write(f"- **N¬∞DPE :** {st.session_state['n_dpe']}")
            st.write(f"- **Note cible :** {st.session_state['note_cible']}")

            # Lancer le processus final
            if st.button("üõ†Ô∏è Lancer le processus final"):
                with st.spinner("Traitement en cours..."):
                    results = api_final_process(st.session_state["n_dpe"], st.session_state["note_cible"])
                    st.success("üéâ Analyse termin√©e ! Voici vos r√©sultats :")

                    # Section des r√©sultats textuels
                    if results:
                        for result in results[:-1]:
                            st.markdown(
                                f"""
                                <div style='
                                    background-color: #f8f9fa;
                                    padding: 10px;
                                    border-left: 5px solid #007bff;
                                    margin-bottom: 10px;
                                    border-radius: 5px;
                                    '>
                                    <strong style="color: #007bff;">üí° {result}</strong>
                                </div>
                                """,
                                unsafe_allow_html=True
                            )

                        # Afficher l'√©tiquette atteinte (dernier √©l√©ment de la liste)
                        label_reached = results[-1]
                        if label_reached in dpe_colors:
                            st.subheader("üîπ √âtiquette atteinte :")
                            st.markdown(
                                f"<div class='dpe-button' style='background-color: {dpe_colors[label_reached]};'>{label_reached}</div>",
                                unsafe_allow_html=True
                            )

    main()

# Page "√Ä propos"
elif st.session_state["current_page"] == "√Ä propos":
    st.title("√Ä propos")
    st.write("Bienvenue dans l'application DPExplorer !")
    st.markdown("""
# DPExplorer : Priorisez vos travaux pour un meilleur DPE

**DPExplorer** est un projet open-source visant √† analyser et am√©liorer la performance √©nerg√©tique des logements en France.
Il repose sur une approche de **Machine Learning** pour pr√©dire la note du **Diagnostic de Performance √ânerg√©tique (DPE)** et recommander des **optimisations d'isolation**.

L'objectif est de fournir un **outil interactif**, accessible via une interface Streamlit, permettant aux utilisateurs d'explorer l'impact de diff√©rentes r√©novations √©nerg√©tiques.

---

## Contexte du projet

Le DPE est un indicateur cl√© pour √©valuer la consommation √©nerg√©tique d'un logement et ses √©missions de gaz √† effet de serre (GES). Avec la **loi Climat et R√©silience de 2021** et les objectifs de r√©duction de l'empreinte carbone, l'am√©lioration de l'isolation des b√¢timents est devenue un enjeu majeur.

Cependant, les propri√©taires et professionnels du b√¢timent rencontrent **des difficult√©s √† quantifier l'impact des r√©novations** sur la note DPE. **DPExplorer r√©pond √† ce besoin en proposant un mod√®le pr√©dictif bas√© sur des donn√©es r√©elles.**
---

## Donn√©es utilis√©es

**DPExplorer** s'appuie directement sur la base de donn√©es de l'ADEME et est compatible avec tous les DPE publi√©s apr√®s juillet 2021.
Gr√¢ce au num√©ro de DPE, l'outil collecte automatiquement les informations essentielles sur le b√¢timent, facilitant ainsi les simulations et l‚Äô√©valuation des travaux √† r√©aliser.
- √âtant donn√© que chaque DPE compl√©t√© par un professionnel du b√¢timent contient plusieurs centaines de caract√©ristiques, une s√©lection rigoureuse a √©t√© r√©alis√©e afin de ne retenir que les informations les plus pertinentes :
- Caract√©ristiques thermiques : isolation des murs, toiture, sol, menuiseries, etc.
- Consommation √©nerg√©tique : kWh/m¬≤/an, √©missions de CO‚ÇÇ.
- Classement DPE : Cat√©gories de A √† G.
- D√©perditions thermiques : coefficient Ubat (W/m¬≤.K) et ses d√©compositions.

---

## Mod√©lisation et approche

### Pr√©diction de la note DPE
Nous avons utilis√© un RandomForestClassifier pour pr√©dire la note DPE en fonction des caract√©ristiques du logement. Le mod√®le a √©t√© √©valu√© √† l'aide de :
-Accuracy Score
-Matrice de confusion
-Feature Importance pour interpr√©ter les variables influentes

### Estimation des d√©perditions thermiques
Un mod√®le de r√©gression lin√©aire a √©t√© d√©velopp√© pour estimer la d√©perdition √©nerg√©tique totale √† partir des contributions de chaque √©l√©ment (toiture, murs, sol, etc.).

### Optimisation des d√©perditions thermiques
L'approche consiste √† simuler des am√©liorations progressives des coefficients de d√©perdition thermique afin d'atteindre les seuils pr√©conis√©s par l'ADEME.

---
## Interface et mise en production

Le projet est d√©ploy√© sous Streamlit, offrant une interface simple et intuitive. Les fonctionnalit√©s incluent :
- Import de fichiers contenant des diagnostics DPE
- Visualisation des pr√©dictions avant/apr√®s travaux
- Recommandations d'am√©lioration bas√©es sur les r√©sultats du mod√®le

---

## Technologies utilis√©es

- Python (pandas, scikit-learn, matplotlib, seaborn)
- Machine Learning : Random Forest, R√©gression Lin√©aire
- Streamlit pour l'interface utilisateur
- Docker pour le d√©ploiement

---

## √Ä titre informatif

Il est important de noter que les travaux d'isolation, √† eux seuls, ne suffisent g√©n√©ralement pas √† faire passer un b√¢timent d'une √©tiquette peu performante √† une √©tiquette tr√®s performante.

**DPExplorer** est un outil con√ßu √† titre informatif pour guider vos d√©cisions sur les travaux d‚Äôam√©lioration √©nerg√©tique.
Il ne remplace en aucun cas l‚Äôexpertise et les conseils d‚Äôun professionnel qualifi√©, indispensable pour une √©valuation compl√®te et conforme aux normes en vigueur.

---

## R√©alisation du projet

Ce projet a √©t√© r√©alis√© dans le cadre d‚Äôun projet de fin de bootcamp chez **Le Wagon**, par [Edouard Lenoir](https://www.linkedin.com/in/edouard-lenoir-/), [Alexandre Marmin](https://www.linkedin.com/in/alexandre-marmin/), [L√©o Da Rocha](https://www.linkedin.com/in/l√©o-da-rocha-593695215/) et [Mehdi Plumaseau](https://www.linkedin.com/in/medhiplumasseau/).
Il illustre l‚Äôapplication des comp√©tences en Machine Learning et en traitement de donn√©es pour r√©pondre √† un besoin concret.
    """)
